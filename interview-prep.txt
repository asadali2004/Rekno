Rekno Project Interview Preparation
==============================================

1. What is the 'out' directory?
--------------------------------
- The 'out' directory contains compiled Java class files. When you compile your Java source code (from 'src'), the resulting .class files are placed in 'out'. This allows you to run the application without recompiling every time, and keeps compiled files separate from your source code.

2. Working Flow of the Project
------------------------------
- The application starts from `Main.java`.
- It tries to load a knowledge graph from 'graph.json' (using `KnowledgePersistence`). If the file doesn't exist, it starts with an empty graph.
- It launches a simple HTTP server (`SimpleHttpServer`) on port 8000, exposing REST API endpoints and serving the web interface from the 'web' directory.
- The web interface allows users to add, edit, delete, and connect knowledge nodes, which are concepts in your knowledge graph.
- Each connection between nodes has a strength (0-100) that decays over time (simulating forgetting), and can be reinforced (simulating learning).
- The server periodically applies decay to all connections and can save the graph back to 'graph.json'.

3. Core Concept Used in the Project
------------------------------------
- The core concept is a "Knowledge Graph": a network of nodes (concepts) connected by edges (relationships) with strengths.
- The graph simulates human memory: connections decay (weaken) over time, but can be reinforced by user actions.
- The project demonstrates object-oriented programming (OOP), RESTful API design, file persistence (JSON), and basic web server implementation in Java.

4. What to Prepare for an Interview
------------------------------------
- **Java Basics**: Classes, objects, inheritance, interfaces, exception handling, collections (Map, List, etc.).
- **OOP Principles**: Encapsulation, abstraction, modularity (how model, persistence, and server are separated).
- **File I/O and JSON**: How data is saved/loaded using Gson, and why JSON is used for persistence.
- **REST API**: How HTTP endpoints are created and handled in Java, and how the frontend communicates with the backend.
- **Concurrency**: Use of scheduled tasks for periodic decay.
- **Web Basics**: How the Java backend serves static files and APIs to the frontend (HTML, JS, CSS in 'web').
- **Project Structure**: Be able to explain the purpose of each main directory/file.
- **Design Decisions**: Why use a graph? Why decay/reinforce? How does this help learning?
- **Improvements**: Think about what features or code quality improvements you could add (e.g., authentication, better error handling, more graph analytics, etc.).

Good luck with your interview! Review the code, try running and using the app, and be ready to explain your design choices and what you learned from building it. 







Your project is a great demonstration of core Object-Oriented Programming (OOP) concepts in Java, as well as several important Java topics. Here’s how:

---

## How Your Project Demonstrates OOP Concepts

### 1. **Classes and Objects**
- You define classes like `KnowledgeGraph`, `KnowledgeNode`, `KnowledgePersistence`, and `SimpleHttpServer`.
- You create objects (instances) of these classes to represent nodes, the graph, and to handle persistence and server logic.

### 2. **Encapsulation**
- Data (fields) in your classes are marked as `private` (e.g., `private Map<String, KnowledgeNode> nodes;` in `KnowledgeGraph`).
- Access to data is controlled through public methods (getters, setters, and other methods).

### 3. **Abstraction**
- Each class has a clear responsibility:
  - `KnowledgeGraph`: Manages the structure and logic of the graph.
  - `KnowledgeNode`: Represents a single concept/node.
  - `KnowledgePersistence`: Handles saving/loading data.
  - `SimpleHttpServer`: Manages HTTP requests and serves the frontend.
- The user of these classes doesn’t need to know the internal details, just how to use their public methods.

### 4. **Modularity**
- Code is organized into packages (`model`, `persistence`, `server`), separating concerns and making the codebase easier to maintain and understand.

### 5. **(Some) Inheritance and Polymorphism**
- While your current code doesn’t show custom inheritance hierarchies, you use Java’s built-in inheritance (e.g., extending `Thread` for shutdown hooks, using interfaces like `Runnable` for scheduled tasks).
- You use polymorphism when working with interfaces and abstract types (e.g., `Map`, `List`).

---

## Java Topics Used in Your Project

Here are the main Java topics your project covers:

1. **OOP Principles** (as above)
2. **Collections Framework**
   - Use of `Map`, `HashMap`, `List`, `ArrayList` to store and manage nodes and connections.
3. **Exception Handling**
   - Use of `try-catch` blocks for error handling (e.g., file I/O, server operations).
4. **File I/O**
   - Reading from and writing to files (`FileReader`, `FileWriter`).
5. **JSON Serialization/Deserialization**
   - Using Gson to convert between Java objects and JSON.
6. **Java Packages and Imports**
   - Organizing code into logical packages and importing classes.
7. **Multithreading/Concurrency**
   - Using `ScheduledExecutorService` to schedule periodic tasks (decay).
   - Using shutdown hooks for graceful shutdown.
8. **HTTP Server and Networking**
   - Using `HttpServer` to create a REST API and serve static files.
9. **Lambda Expressions**
   - Using lambdas for scheduled tasks and event handling.
10. **Command-Line Arguments**
    - (If used/extended) Handling arguments in `main(String[] args)`.

---

## What to Prepare for Interview

- **Explain OOP concepts** (with examples from your code).
- **Describe how you use collections** (why `Map` for nodes, etc.).
- **Show how you handle errors and file operations.**
- **Discuss how you persist data using JSON and Gson.**
- **Explain how you use threads and scheduled tasks.**
- **Describe how your server works and how REST endpoints are handled.**
- **Be ready to talk about code organization and modularity.**
- **If asked, discuss possible improvements (inheritance, interfaces, design patterns, etc.).**

---

**Tip:**  
Go through your code and try to find examples for each of these topics. Practice explaining them in your own words, as you would to an interviewer.

If you want, I can add this summary to your `interview-prep.txt` file for easy reference!